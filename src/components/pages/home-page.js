import React from 'react';
import './pages.css';
import './home-page.css';
import { Parallax } from 'react-materialize';
import Features from '../modules/features';

export default (props) => {
	const { colors, host } = props.data;
	return ( 
		<div className='home-page'>
				<div className={`section ${colors.sectionColor}`}>
					<div className="row container">
						<h2 className="header">
							Разработка приложений на React.
						</h2>
						<p className="grey-text text-darken-3 lighten-3">
							React - это популярная Java script библиотека, разработанная программистами из Facebook.
							С помощью неё создаются удобные и быстрые UI - пользовательские интерфейсы. На сегодняшний
							день React считается одним из самых перспективных направлений во frontend-разработке.
							Одной из отличительных особенностей React является возможность использовать JSX: язык
							программирования с близким к HTML синтаксисом, который компилируется в JavaScript.
							Разработчики могут добиваться высокой производительности приложений с помощью Virtual DOM.
							React позволяет создавать изоморфные приложения, которые помогут избавиться от
							неприятной ситуации, когда пользователь с нетерпением ожидает, когда же наконец завершится
							загрузка данных и на экране его компьютера наконец появится что-то помимо анимации загрузки.
							Созданные компоненты могут быть с легкостью изменены и использованы заново в новых проектах.
							Высокий процент переиспользования кода повышает покрываемость тестами, что, в свою очередь,
							приводит к более высокому уровню контроля качества.
						</p>
					</div>
				</div>
			<Parallax image={<img src={host + '/img/parallax1.jpg'} alt='first parallax'/>} />
			<Features bgColor={colors.featuresColor}/>
				<div className={`section ${colors.sectionColor}`}>
					<div className="row container">
						<p className="grey-text text-darken-3 lighten-3">
							В своей работе React использует технологию virtual DOM. При работе React создаётся специальный
							объект, отражающий состояние реального DOM браузера. При внесении изменений в компоненты React
							внутренний механизм производит сравнение текущего и предидущего состояния virtual DOM, определяет
							в какие места реального DOM нужно внести изменения и вызывает обновление реального DOM, внося
							все изменения точечно и за один раз. Минимизация обращений к реальному DOM значительно повышает
							производительность, так как внесение изменений в DOM браузера является довольно дорогой операцией.
						</p>
						<p className="grey-text text-darken-3 lighten-3">
							При помощи React можно создавать SPA - single page applications (одностраничные приложения).
							Это концепция веб-сайтов и приложений, которые работают в браузере, и организуют свою работу
							без перезагрузки страницы. Этот подход имеет свои преимущества и недостатки. Ввиду того, что
							переходы пользователя внутри приложения не перезагружают страницу, загрузка страниц происходит
							гораздо быстрее, чем при традиционном подходе. Кроме того, такой подход минимизирует обращения
							к серверу, что снижает нагрузку на него. С другой стороны, первоначальная загрузка всего
							приложения может быть довольно долгой, что приведёт к ожиданию пользователя, пока он увидит
							хоть что-нибудь, кроме лоадера. Кроме этого, с точки зрения поисковых роботов, React-приложение
							- это пустая страница, что плохо отражается на SEO продвижении сайта. Эти проблемы решаются
							при помощи изоморфного подхода: часть приложения рендерится на сервере, остальное - на стороне
							пользователя. Таким образом, при грамотном проектировании, пользователь сразу видит контент,
							(не смотря на то, что приложение продолжает загрузку) и поисковые роботы тоже получают нужную
							информацию.
						</p>
						<p className="grey-text text-darken-3 lighten-3">
							Ещё одним перспективным направлением является создание приложений для мобильных устройств
							при помощи React. Это вожможно благодаря технологии PWA - progressive web applications
							(прогрессивные веб-приложения) от Google. Её суть состоит в том, чтобы дать возможность
							веб-приложениям работать так, как нативные приложения мобильных устройств: получать и
							отправлять уведомления системе, получать доступ к датчикам телефонов, журналам вызовов,
							календарям и т.д. В общем, делать всё то, что делают нативные приложения, и, даже
							работать без соединения с сетью. Для использования возможностей PWA и написания приложений
							в стиле React существует библиотека React Native. С помощью неё можно создавать приложения
							для мобильных устройств на React. Это позволяет переиспользовать значительную часть кода,
							повышает скорость и снижает сложность разработки.
						</p>
					</div>
				</div>
			<Parallax image={<img src={host + '/img/parallax2.jpg'} alt='second parallax' />} />
				<div className={`section ${colors.sectionColor}`}>
					<div className="row container">
						<h3 className="header">
							Использование библиотеки materialize.
						</h3>
						<p className="grey-text text-darken-3 lighten-3">
							Materialize - это довольно популярная UI-библиотека. Она появилась в 2014 году как реализация
							концепции Material Design, презентованной Google. В ней содержатся все основные элементы
							интерфейса, управления и разметки, из которых строятся сайты. При этом все они реализованны
							в едином стиле, соответствующем идеям Material Design. Поэтому сайты, написанные при помощи
							materialize выглядят современно и аккуратно. Библиотека имеет подробную документацию, которую
							можно найти на<a target='_blank' href='https://materializecss.com/' rel='noopener noreferrer'> официальном сайте </a>.
						</p>
						<p>
							Для более удобной интеграции Materialize c React было разработанно несколько решений. Одним
							из самых удачных является библиотека React Materialize. В ней содержятся компоненты React,
							реализующие конкретные элементы интерфейса: кнопку, чекбокс, карточку, секцию, футтер, меню,
							и т.д. При помощи передачи им свойств и childrens они кастомизируются. Основным достоинством
							их использования является простота. Главным недостатком - сложность более тонкой настройки. Но
							не существует никаких ограничений, не позволяющих использовать совмесно компоненты из
							React Materialize и свои собственные. Документацию по React Materialize можно найти на
							<a target='_blank' href='http://react-materialize.github.io/react-materialize/?path=/story/react-materialize--welcome' rel='noopener noreferrer'> официальной странице </a>
							проекта.

						</p>
					</div>
				</div>
		</div>
	);
}